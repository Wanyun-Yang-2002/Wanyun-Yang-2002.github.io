<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog搭建过程(Hexo)</title>
    <url>/2021/12/14/Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B(Hexo)/</url>
    <content><![CDATA[<p>一开始是按照网上搜索到的教程开始制作的，中途出了不少差错，于是便搁置了，直到今天才想起来。</p>
<h1 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h1><p>分享一个很实用的教程：<a href="http://www.wxylyw.com/2018/10/25/hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%85%A8%E8%BF%87%E7%A8%8B/#more">hexo 从零搭建全过程</a><br>基本上如果没有什么其他问题的话一次性就搭建好了</p>
<h1 id="主题安装及美化"><a href="#主题安装及美化" class="headerlink" title="主题安装及美化"></a>主题安装及美化</h1><h2 id="基本安装及基础美化"><a href="#基本安装及基础美化" class="headerlink" title="基本安装及基础美化"></a>基本安装及基础美化</h2><p>关于主题页面设置的一些方法：<a href="https://haomingzhang.com/hexo_2/">hexo主题安装以及next8.0主题美化</a></p>
<h2 id="进阶美化参考"><a href="#进阶美化参考" class="headerlink" title="进阶美化参考"></a>进阶美化参考</h2><h3 id="包括了很多方面的美化，但对我而言用处并没有很大"><a href="#包括了很多方面的美化，但对我而言用处并没有很大" class="headerlink" title="包括了很多方面的美化，但对我而言用处并没有很大"></a>包括了很多方面的美化，但对我而言用处并没有很大</h3><p><a href="https://qianling.pw/hexo-optimization/">Hexo 优化汇总</a></p>
<h3 id="内容也比较丰富，有很多实用性强的美化"><a href="#内容也比较丰富，有很多实用性强的美化" class="headerlink" title="内容也比较丰富，有很多实用性强的美化"></a>内容也比较丰富，有很多实用性强的美化</h3><p><a href="https://vic.kim/2019/05/25/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">Hexo博客优化之Next主题美化</a><br><a href="https://blog.bill.moe/hexo-theme-next-config-optimization/">Hexo-NexT主题自定义配置高阶教程</a></p>
<h3 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h3><p>这个单拎出来推荐，是因为一开始搜了很多教程，但是尝试过之后都没有用，最终找到了这个教程，试了一次就成功了。<br><a href="https://www.cnblogs.com/cscshi/p/15196114.html">Hexo-NexT 设置博客背景图片</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础学习笔记</title>
    <url>/2021/12/26/JS%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><b> 看的视频是<a href="https://study.163.com/course/courseLearn.htm?coursejsId=195001#/learn/video?lessonId=2004&courseId=195001">翁恺老师讲的Javascript</a>,视频不是很长，不过了解js基础足够了，想深入学还得看别的+多多练习<br></b></p>
<h1 id="一开始在代码中记的笔记"><a href="#一开始在代码中记的笔记" class="headerlink" title="一开始在代码中记的笔记:"></a>一开始在代码中记的笔记:</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;alert(&#x27;hi&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 网页打开出现hi的提示 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- alert产生对话框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">&quot;hello world!&lt;br/&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// document是浏览器的页面（称为对象）</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// .表示左边的做右边的动作</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// write表示“写”</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//hello 是字符串，放在&quot;&quot;里面</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//结尾要加分号</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hello;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//一个名叫hello的变量</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//var 定义变量</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//JS中变量没有类型，赋给变量的值有类型</span></span></span><br><span class="line"><span class="javascript">            hello = <span class="string">&quot;hello&quot;</span>;    <span class="comment">//赋值</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(hello+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> age = <span class="number">16</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ot = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(hello + age+<span class="string">&quot;&lt;br/&gt;&quot;</span>);    <span class="comment">//对于字符串“+”就是字符串连接，输出hello16</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//加减乘除取模，比较大小，++--什么的都和C差不多</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//JS中数字不区分整数浮点数啥的，但是内部有范围</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> age1 = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> age2 = <span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(age1 &lt;= age2+<span class="string">&quot;&lt;br/&gt;&quot;</span>);   <span class="comment">//输出true</span></span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断语句</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//if-else语句</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//建议在if和else后面永远放一对&#123;&#125;，可以保证不犯错误</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (age &gt; <span class="number">18</span>)&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;成年啦&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;还小呢&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;好啦好啦知道辣&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//switch-case语句</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> t = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span> (t) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;你好&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;早&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>:    <span class="comment">//默认</span></span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;WTF???&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></span><br><span class="line"><span class="javascript">            o.name = <span class="string">&quot;John&quot;</span>;</span></span><br><span class="line"><span class="javascript">            o.age = <span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">            o.salary = <span class="number">300</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> o)&#123;</span></span><br><span class="line"><span class="javascript">                alert(x);</span></span><br><span class="line"><span class="javascript">                alert(x + <span class="string">&quot;=&quot;</span> + o[x]);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (confirm(<span class="string">&quot;还继续吗？&quot;</span>))&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;继续&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;再见&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name = prompt(<span class="string">&quot;你的名字是： &quot;</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;hello&quot;</span>+name);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="JavaScript介绍-后面用markdown做的笔记"><a href="#JavaScript介绍-后面用markdown做的笔记" class="headerlink" title="JavaScript介绍(后面用markdown做的笔记)"></a>JavaScript介绍(后面用markdown做的笔记)</h1><ul>
<li>是一种可以在浏览器中运行的脚本语言</li>
<li>主要用来实现在浏览器端的动作<ul>
<li>用户交互</li>
<li>数据处理</li>
</ul>
</li>
<li>JavaScript是解释性语言</li>
<li>HTML中的js<ul>
<li>在head中定义函数<ul>
<li>&lt;script languang &#x3D; “JavaScript”&gt;</li>
</ul>
</li>
<li>在相应标记中定义动作<ul>
<li>&lt;onXXX&#x3D;””&gt;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="变量和计算"><a href="#变量和计算" class="headerlink" title="变量和计算"></a>变量和计算</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>用于存放数据的东西</li>
<li>var：用于定义变量</li>
</ul>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><h1 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h1><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><ul>
<li>if-else语句<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建议在if和else后面永远放一对&#123;&#125;，可以保证不犯错误</span></span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">18</span>)&#123;</span><br><span class="line">      alert(<span class="string">&quot;成年啦&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      alert(<span class="string">&quot;还小呢&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">&quot;好啦好啦知道辣&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>switch-case语句<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (t) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        alert(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        alert(<span class="string">&quot;早&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:    <span class="comment">//默认</span></span><br><span class="line">        alert(<span class="string">&quot;WTF???&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>逻辑计算<ul>
<li>and：&amp;&amp;</li>
<li>or：||</li>
<li>not：!</li>
</ul>
</li>
<li>优先级<ul>
<li>所有的逻辑运算符的优先级都低于关系运算符</li>
<li>! &gt; &amp;&amp; &gt; ||</li>
</ul>
</li>
<li>条件运算符（三元运算符）<ul>
<li>格式：&lt;exp&gt;?&lt;v1&gt;:&lt;v2&gt;</li>
<li>解释：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (exp)&#123;</span><br><span class="line">    v1;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li>while语句<ul>
<li>while语句让同一段代码可以重复执行很多次<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先判断再循环</span></span><br><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> LIMIT = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt;= LIMIT)&#123;</span><br><span class="line">    alert(count);</span><br><span class="line">    count = count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>do-while语句<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环一次之后才开始判断</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>();</span><br></pre></td></tr></table></figure></li>
<li>for语句<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i=i+<span class="number">1</span>)&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>函数就是一段代码，我们给它起个名字，放起来，以后可以用</li>
<li>JavaScript有很多内置函数，能帮助我们实现很多有用的功能</li>
<li>定义函数<ul>
<li>function fun_name(){}</li>
<li>var f &#x3D; new Function(“x”,”y”,”return x*y”); 等价于 function f(x,y){return x*y;}</li>
<li>其他的和其他语言都差不多的样子…</li>
</ul>
</li>
<li>变量空间<ul>
<li>定义在函数外的变量在整个页面中都有效</li>
<li>定义在函数内部的变量只在函数内有效</li>
</ul>
</li>
</ul>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul>
<li>var marks &#x3D; new Array(); 创建一个数组marks</li>
<li>marks[0] ：[]可以访问数组，数组从0开始</li>
<li>数组长度：marks.length给出数组marks的长度<ul>
<li>.length可写</li>
</ul>
</li>
<li>堆栈操作<ul>
<li>.push</li>
<li>.pop</li>
</ul>
</li>
<li>队列操作<ul>
<li>.push</li>
<li>.shift</li>
</ul>
</li>
<li>排序操作<ul>
<li>.sort</li>
<li>.reverse    按顺序颠倒</li>
</ul>
</li>
<li>其他操作<ul>
<li>.concat 连接</li>
<li>.slice 取出某一部分作为新数组</li>
<li>.splice(开始位置，删除个数，插入元素)</li>
</ul>
</li>
</ul>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul>
<li>对象是JavaScript的一种复合数据类型，它可以把多个数据集中在一个变量中，并且给其中的每个数据起名字</li>
<li>或者说，对象是一个属性集合，每个属性有自己的名字和值<ul>
<li>JavaScript并不像其他OOP语言那样有类的概念，不是先设计类再制造对象</li>
</ul>
</li>
<li>创建对象<ul>
<li>var o &#x3D; new Object();</li>
<li>var ciclr &#x3D; {x:0,y:0,radius:2};</li>
</ul>
</li>
<li>访问对象属性<ul>
<li>.运算符</li>
</ul>
</li>
<li>删除对象属性<ul>
<li>delete book.chapter1;</li>
</ul>
</li>
<li>遍历所有属性<ul>
<li>for (var x in o)…<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">o.age = <span class="number">30</span>;</span><br><span class="line">o.salary = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> o)&#123;</span><br><span class="line">  alert(x);</span><br><span class="line">  alert(x + <span class="string">&quot;=&quot;</span> + o[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="浏览器里的JavaScript"><a href="#浏览器里的JavaScript" class="headerlink" title="浏览器里的JavaScript"></a>浏览器里的JavaScript</h1><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ul>
<li>浏览器的全局对象是window</li>
<li>所有全局的变量实际上是window的成员<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var answer = 12;</span><br><span class="line">alert(window.answer);</span><br></pre></td></tr></table></figure></li>
<li>window.document表示浏览器窗口中的HTML页面</li>
<li>document.write()将内容写入页面</li>
<li>页面中的元素就是document里的成员</li>
<li>HTML中的JavaScript<ul>
<li>在&lt;script&gt;&lt;&#x2F;script&gt;标记中</li>
<li>在&lt;script&gt;的src属性或archive指定的外部文件中<ul>
<li>&lt;script src &#x3D; “”&gt;&lt;&#x2F;script&gt;</li>
<li>一个纯粹的代码文件，没有HTML标记</li>
</ul>
</li>
<li>在某个HTML标记的事件处理器中<ul>
<li>&lt;p onMouseOver &#x3D; “”&gt;   鼠标移动到上面时</li>
<li>body事件<ul>
<li>onLoad 页面显示之前</li>
<li>onUnload 页面关掉之前</li>
</ul>
</li>
</ul>
</li>
<li>简单对话框<ul>
<li>alert</li>
<li>confirm</li>
<li>prompt</li>
</ul>
</li>
<li>状态栏（在页面最下面（左下角？））<ul>
<li>status &#x3D; </li>
<li>defaultStatus &#x3D;</li>
</ul>
</li>
<li>定时器<ul>
<li>setInterval()</li>
</ul>
</li>
</ul>
</li>
<li>window的控制方法<ul>
<li>window.open()</li>
<li>windoe.close()</li>
</ul>
</li>
<li>location对象<ul>
<li>window.location代表当前文档的URL</li>
</ul>
</li>
</ul>
<h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><ul>
<li>document的成员<ul>
<li>anchors[]</li>
<li>forms[]</li>
<li>images[]</li>
<li>cookie</li>
<li>title</li>
<li>bgColor</li>
<li>fgColor</li>
<li>linkColor</li>
<li>alinkColor</li>
<li>vlinkColor</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang基础学习笔记</title>
    <url>/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p>💡<a href="https://www.youtube.com/watch?v=yyUHQIec83I&t=72s">Golang Tutorial for Beginners | Full Go Course</a></p>
<h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ol>
<li><p>创建文件夹</p>
</li>
<li><p>创建main.go</p>
</li>
<li><p>执行命令，生成 go.mod 文件</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> mod init 文件夹名</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 main.go 中输入如下代码，运行成功</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 注意：不使用的package不要import</p>
</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>Discover mistakes at compile time, NOT at runtime</li>
</ol>
<h2 id="Variables-Constants"><a href="#Variables-Constants" class="headerlink" title="Variables &amp; Constants"></a>Variables &amp; Constants</h2><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><ol>
<li><p>变量的声明</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Go Conference&quot;</span></span><br><span class="line">name := <span class="string">&quot;Go Conference&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项：</p>
<ol>
<li>声明的变量必须使用，否则就不要声明变量</li>
</ol>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> conferenceName = <span class="string">&quot;Go Conference&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Welcome to&quot;</span>, conferenceName, <span class="string">&quot;booking application&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><p>与变量（Variables）类似，但值无法改变</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 const 声明</span></span><br><span class="line"><span class="keyword">const</span> conferenceTickets = <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h3 id="Package-Level-Variables"><a href="#Package-Level-Variables" class="headerlink" title="Package Level Variables"></a>Package Level Variables</h3><ul>
<li>Defined at the top <strong>outside of all functions  - 在main函数以外上面定义</strong></li>
<li>They can be <strong>accessed inside any of the functions</strong></li>
<li>And in all files, which are in the <strong>same package</strong></li>
<li>不能用 <code>:=</code> 创建</li>
<li>传参时不用写</li>
</ul>
<h3 id="Local-Variables"><a href="#Local-Variables" class="headerlink" title="Local Variables"></a>Local Variables</h3><ul>
<li>Defined <strong>inside a function or a block</strong></li>
<li>They can be <strong>accessed only inside that function or block of code</strong></li>
<li>Create the variable where you need it</li>
</ul>
<h2 id="Formatted-Output"><a href="#Formatted-Output" class="headerlink" title="Formatted Output"></a>Formatted Output</h2><p>Print formatted data</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;some text with a variable %s&quot;</span>, myVariable)</span><br></pre></td></tr></table></figure>

<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><p>声明类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var something Type</span></span><br><span class="line"><span class="keyword">var</span> userName <span class="keyword">string</span></span><br></pre></td></tr></table></figure>

<p>检查类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用 %T</span></span><br><span class="line">fmt.Printf(%T, something)</span><br></pre></td></tr></table></figure>

<ul>
<li>The type keyword creates a new type, with the name you specify</li>
<li>In fact, you could also create a type based on every other data type like int, string etc.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span></span><br><span class="line"><span class="keyword">type</span> name <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">type</span> name <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> name <span class="keyword">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Strings-Integers-Booleans"><a href="#Strings-Integers-Booleans" class="headerlink" title="Strings &amp; Integers &amp; Booleans"></a>Strings &amp; Integers &amp; Booleans</h3><ul>
<li><p>Strings : for <strong>textual data</strong>, defined with double quotes, eg : “This is a string”</p>
</li>
<li><p>Integers : representing <strong>whole numbers</strong>, positive and negative, eg : 5, 10, -20</p>
<p>  <img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.png" alt="01.png"></p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数字42转字符串，依旧是十进制形式，若为16，则是16进制</span></span><br><span class="line">strconv.FormatUint(<span class="keyword">uint64</span>(<span class="number">42</span>), <span class="number">10</span>) <span class="comment">// 42, string</span></span><br><span class="line">strconv.FormatUint(<span class="keyword">uint64</span>(<span class="number">42</span>), <span class="number">16</span>) <span class="comment">// 2a, string</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Booleans : True or False</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> noSomething <span class="keyword">bool</span> = something == <span class="number">0</span></span><br><span class="line">noSomething := something == <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><ul>
<li>Maps unique keys to values</li>
<li>You can retrieve the value by using its key later</li>
<li>All keys have the same data type</li>
<li>All values have the same data type</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap = <span class="built_in">make</span>(<span class="keyword">map</span>[keyType]valueType)</span><br><span class="line"></span><br><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">var</span> userData = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">userData[<span class="string">&quot;firstName&quot;</span>] = firstName</span><br></pre></td></tr></table></figure>

<h3 id="Arrays-Slices"><a href="#Arrays-Slices" class="headerlink" title="Arrays &amp; Slices"></a>Arrays &amp; Slices</h3><ul>
<li><p>Arrays</p>
<ul>
<li>必须知道大小</li>
<li>Fixed Size</li>
<li>Only the <strong>same data type</strong> can be stored</li>
</ul>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bookings = [<span class="number">50</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bookings [<span class="number">50</span>]<span class="keyword">string</span></span><br><span class="line">bookings[<span class="number">0</span>] = <span class="string">&quot;Text&quot;</span></span><br><span class="line">bookings[<span class="number">1</span>] = first + <span class="string">&quot; &quot;</span> + last</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrays的大小</span></span><br><span class="line"><span class="built_in">len</span>(array)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Slices</p>
<ul>
<li>大小可变</li>
<li>Slice is an abstraction of an Array</li>
<li>More flexible and powerful : <strong>variable-length</strong> or an sub-array of its own</li>
<li>Slices are also <strong>index-based</strong> and have a size, but is <strong>resized when needed</strong></li>
</ul>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明方式</span></span><br><span class="line"><span class="keyword">var</span> bookings []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">bookings := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">sliceName = <span class="built_in">append</span>(sliceName, elements)   <span class="comment">// Adds the element(s) at the end of the slice.</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Creating a slice with <code>make()</code></p>
<ul>
<li>Alternative way to create a slice</li>
<li>We need to define the initial size of the slice</li>
</ul>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bookings = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h3><ul>
<li>Collect different data types of data</li>
<li>type statement - Custom Types<ul>
<li>The <strong>type keyword creates a new type</strong>, with the name you specify</li>
<li><em>“create a type called “userData” <strong>based on a struct</strong> of firstName, lastName..”</em></li>
</ul>
</li>
<li>Defining a structure<ul>
<li>Mixed data type</li>
<li>Defining a structure (which fields) of the User Type</li>
</ul>
</li>
<li>It’s like a lightweight class, which e.g. doesn’t support inheritance</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建struct</span></span><br><span class="line"><span class="keyword">type</span> UserData <span class="keyword">struct</span> &#123;</span><br><span class="line">	firstName       <span class="keyword">string</span></span><br><span class="line">	numberOfTickets <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">var</span> userData = UserData&#123;</span><br><span class="line">		firstName:       firstName,</span><br><span class="line">		numberOfTickets: userTickets,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">userData.firstName</span><br><span class="line">userData.numberOfTickets</span><br></pre></td></tr></table></figure>

<h2 id="User-Input"><a href="#User-Input" class="headerlink" title="User Input"></a>User Input</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Scan() 括号里要么是指针，要么是具体地址</span></span><br><span class="line">fmt.Scan(&amp;inputText)</span><br><span class="line">fmt.Scan(<span class="number">0xc00124</span>)</span><br></pre></td></tr></table></figure>

<p>user input validation</p>
<h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><ul>
<li>A pointer is a variable that <strong>points to the memory address of another variable.</strong></li>
<li>A special variable.</li>
</ul>
<p><img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled.png" alt="Untitled"></p>
<h2 id="Scope-Rules"><a href="#Scope-Rules" class="headerlink" title="Scope Rules"></a>Scope Rules</h2><h3 id="Variable-Scopes"><a href="#Variable-Scopes" class="headerlink" title="Variable Scopes"></a>Variable Scopes</h3><p>Scope is the region of a program, where a defined variable can be accessed</p>
<p><strong>3 Levels of Scope</strong></p>
<ul>
<li>Local<ul>
<li>Declaration within function<ul>
<li>Can be used only within that function</li>
</ul>
</li>
<li>Declaration within block (eg. for, if-else)<ul>
<li>Can be used only within that block</li>
</ul>
</li>
</ul>
</li>
<li>Package<ul>
<li>Declaration outside all functions<ul>
<li>Can be used everywhere in the same package</li>
</ul>
</li>
</ul>
</li>
<li>Global<ul>
<li>Declaration outside all functions &amp; uppercase first letter<ul>
<li>Can be used everywhere across all packages</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h2><ul>
<li>Only have the “for loop”</li>
<li>Infinite Loop</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户使用 ctrl + C 退出循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本质是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>For-Each Loop : Iterating over a list</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Range iterates over elements for different data structures (so not only arrays and slices)</span></span><br><span class="line"><span class="comment">// For arrays and slices, range provides the index and value for each element</span></span><br><span class="line"><span class="keyword">for</span> condition &#123;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历完bookings里面所有元素后结束循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, booking := <span class="keyword">range</span> bookings &#123;</span><br><span class="line">		<span class="keyword">var</span> names = strings.Fields(booking)</span><br><span class="line">		firstNames = <span class="built_in">append</span>(firstNames, names[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用不到index可以用下划线代替</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, booking := <span class="keyword">range</span> bookings &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>break</code>退出循环</li>
<li>使用<code>continue</code>继续</li>
</ul>
<h2 id="If-else-Switch"><a href="#If-else-Switch" class="headerlink" title="If-else &amp; Switch"></a>If-else &amp; Switch</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">		<span class="comment">// code to be executed if condition is true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition &#123;</span><br><span class="line">		<span class="comment">// code to be executed if condition is true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// code to be executed if both conditions are false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以没有else, else if </span></span><br><span class="line"><span class="comment">// else if 可以有多个，else 只能有一个</span></span><br></pre></td></tr></table></figure>

<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>Allows a variable to be tested for equality against a list of values</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example</span></span><br><span class="line"></span><br><span class="line">text := <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="keyword">switch</span> text &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">				<span class="comment">// some code here</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">				<span class="comment">// some code here</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>:</span><br><span class="line">				<span class="comment">// same code here for C and D</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">				<span class="comment">// some code here</span></span><br><span class="line">				<span class="comment">// Default handles the case, if no match is found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><ul>
<li><strong>Encapsulate code</strong> into own container (&#x3D; function). Which <strong>logically belong together!</strong></li>
<li>Like variable name, you should give a function a <strong>descriptive name</strong></li>
<li><strong>Call the function by its name</strong>, whenever you want to execute this block of code</li>
<li>Every program has at least one function, which is the <strong>main()</strong> function</li>
<li>Function is only executed, when “called” !</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(parameters and parametersType)</span> <span class="params">(returnType)</span></span>&#123;</span><br><span class="line">		<span class="comment">// function body</span></span><br><span class="line">		<span class="comment">// Encapsulate code</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Function Parameters<ul>
<li>Information can be passed into functions as parameters</li>
<li>Parameters are also called arguments</li>
</ul>
</li>
<li>Returning values from a function<ul>
<li>A function can return data as a result</li>
<li>So a function can take an input and return an output</li>
<li>In Go you have to define the input and output parameters including its type explicitly</li>
<li>Returning multiple values</li>
</ul>
</li>
</ul>
<h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ul>
<li><p>Go programs are organized into packages</p>
</li>
<li><p>A package is a <strong>collection of Go files</strong></p>
</li>
<li><p>如果全在一个package，运行时在包含所有go文件的文件夹终端输入<code>go run .</code></p>
<p>  <img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled%201.png" alt="Untitled01"></p>
<p>  <img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled%202.png" alt="Untitled02"></p>
<p>  <img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jietu.png" alt="屏幕截图 2023-05-08 093352.png"></p>
</li>
</ul>
<h3 id="Multiple-Packages"><a href="#Multiple-Packages" class="headerlink" title="Multiple Packages"></a>Multiple Packages</h3><p><img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled%203.png" alt="Untitled03"></p>
<h3 id="go-mod"><a href="#go-mod" class="headerlink" title="go.mod"></a>go.mod</h3><p><img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled%204.png" alt="Untitled04"></p>
<p>module booking-app  &#x3D; import path</p>
<p>For all our packages in our booking-app application</p>
<h3 id="Import-package"><a href="#Import-package" class="headerlink" title="Import package"></a>Import package</h3><ul>
<li>Exporting a variable<ul>
<li>Make it available for all packages in the app</li>
<li><strong>Capitalize first letter - 首字母大写</strong></li>
</ul>
</li>
</ul>
<h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><ul>
<li><code>go …</code> starts a new goroutine &#x2F;&#x2F; 让它多进程同时运行(?)</li>
<li>A goroutine is a lightweight thread managed by the Go runtime</li>
<li>Waitgroup<ul>
<li>Waits for the lunched goroutine to finish</li>
<li>Package “sync” provides basic synchronization functionality</li>
<li><code>Add()</code> Sets the number of goroutine to wait for (increases the counter by the provided number)</li>
<li><code>Wait()</code> Blocks until the WaitGroup counter is 0</li>
<li><code>Done()</code> Decrements the WaitGroup counter by 1. So this is called by the goroutine to indicate that it’s finished</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wg = sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">wg.Wait()</span><br><span class="line">wg.Done()</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled%205.png" alt="Untitled05"></p>
<ul>
<li>Managed by the go runtime, we are only interacting with these high level goroutines</li>
<li>Cheaper &amp; lightweight</li>
<li>You can run hundreds of thousands or millions goroutines without affecting the performance</li>
</ul>
<p><img src="/2023/05/13/Golang%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Untitled%206.png" alt="Untitled06"></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/2024/07/22/KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h1><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-str">题目: 28. 找出字符串中第一个匹配项的下标</a><br>自己写了几版代码，总是有几个样例无法通过，于是去看了题解。</p>
<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>KMP算法这个名字来源于Knuth，Morris和Pratt三个人的首字母。<br>上面提到的leetcode28题是KMP算法经典题目，KMP的经典思想是：当出现字符串不匹配时，可以记录⼀部分之前已经匹配的⽂本内容，利⽤这些信息避免从头再去做匹配。<br>KMP算法主要应用于字符串匹配问题，它的重点在于前缀表。</p>
<h1 id="前缀表"><a href="#前缀表" class="headerlink" title="前缀表"></a>前缀表</h1><p>前缀表是⽤来回退的，它记录了模式串与主串(⽂本串)不匹配的时候，模式串应该从哪⾥开始重新匹配。<br>前缀表中记录的是：下标i之前（包括i）的字符串中，有多⼤⻓度的相同前缀后缀。</p>
<h2 id="最长公共前后缀"><a href="#最长公共前后缀" class="headerlink" title="最长公共前后缀"></a>最长公共前后缀</h2><ul>
<li>前缀：包含首字符，不包含尾字符的所有子串</li>
<li>后缀：包含尾字符，不包含首字符的所有子串</li>
</ul>
<p>前缀表内容：{前缀 : 最长相等前后缀}<br>例如：aabaaf</p>
<table>
<thead>
<tr>
<th>下标i之前</th>
<th>最长公共前后缀</th>
<th>最长公共前后缀长度</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>aa</td>
<td>a</td>
<td>1</td>
</tr>
<tr>
<td>aab</td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>aaba</td>
<td>a</td>
<td>1</td>
</tr>
<tr>
<td>aabaa</td>
<td>aa</td>
<td>2</td>
</tr>
<tr>
<td>aabaaf</td>
<td></td>
<td>0</td>
</tr>
</tbody></table>
<p>最终的前缀表：</p>
<table>
<thead>
<tr>
<th>下标i</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>字符串</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>f</td>
</tr>
<tr>
<td>最长公共前后缀</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>0</td>
</tr>
</tbody></table>
<p><strong>下标i并不一定是字符串的最后一个字符</strong><br>当匹配到下标i对应的字符时，如果不匹配，则依据下标i-1的最长公共前后缀的数值，把下标移动到下标数值的位置继续进行匹配。</p>
<blockquote>
<p>当匹配到<code>下标5</code>对应的字符<code>f</code>时，如果不匹配，则依据<code>下标4</code>(字符<code>a</code>)的最长公共前后缀的数值<code>2</code>，把下标移动到<code>下标2</code>的位置(字符<code>b</code>)继续进行匹配。</p>
</blockquote>
<p>很绕，需要拿笔多画几遍才能理解。<br>真神奇，原本觉得这样根本达不到最终结果，可是换不同的字符串匹配，模拟了好几遍，居然最后都能得到正确答案。<br><strong>如果用这种前缀表，要注意当回退到下标0(<code>next[j] &lt; 1</code>)时，要将文本串向后移一位。</strong> 如果是前缀表统一减一的前缀表，则是当<code>next[j] &lt; 0</code>时，将文本串向后移一位再继续匹配。</p>
<h2 id="如何求前缀表？"><a href="#如何求前缀表？" class="headerlink" title="如何求前缀表？"></a>如何求前缀表？</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">定义函数 getNext(<span class="keyword">next</span>, s) &#123;</span><br><span class="line">  <span class="regexp">//</span> 初始化</span><br><span class="line">  <span class="regexp">//</span> 处理前后缀不相同的情况</span><br><span class="line">  <span class="regexp">//</span> 处理前后缀相同的情况</span><br><span class="line">  <span class="regexp">//</span> 更新<span class="keyword">next</span>的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>i：指向后缀末尾<br>j：指向前缀末尾</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span>* next, <span class="keyword">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是前缀表统一减一，那么初始化<code>j = -1</code>，while循环时，判断条件是<code>j &gt;= 0</code>，比较的是<code>s[j-1]</code>，其它的对应进行修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNext</span>(<span class="params"><span class="built_in">next</span>, s</span>):</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="built_in">next</span>[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>，<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> s[i] != s[j]:</span><br><span class="line">            j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>[i] = j</span><br></pre></td></tr></table></figure>
<h1 id="KMP算法完整代码"><a href="#KMP算法完整代码" class="headerlink" title="KMP算法完整代码"></a>KMP算法完整代码</h1><p><strong>c++版是copy的，python版的是自己写的</strong></p>
<h2 id="普通前缀表"><a href="#普通前缀表" class="headerlink" title="普通前缀表"></a>普通前缀表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span>* next, <span class="keyword">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">next</span><span class="params">(needle.size())</span></span>;</span><br><span class="line">        <span class="built_in">getNext</span>(&amp;next[<span class="number">0</span>], needle);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == needle.<span class="built_in">size</span>() ) &#123;</span><br><span class="line">                <span class="keyword">return</span> (i - needle.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNext</span>(<span class="params">self, <span class="built_in">next</span>, s</span>):</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="built_in">next</span>[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> s[i] != s[j]:</span><br><span class="line">                j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="built_in">next</span>[i] = j</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> needle:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span> = [<span class="number">0</span>] * <span class="built_in">len</span>(needle)</span><br><span class="line">        self.getNext(<span class="built_in">next</span>, needle)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(haystack)):</span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> haystack[i] != needle[j]:</span><br><span class="line">                j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> haystack[i] == needle[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="built_in">len</span>(needle):    <span class="comment"># 最后一次相等之后还有j+=1，所以判断的时候必须是 j == len(needle)</span></span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>自己定义的函数如果写在<code>class Solution</code>里面，就得写成<code>def getNext(self, next, s):</code>，引用的时候要写成<code>self.getNext(next, needle)</code><br>如果定义的函数写在外面，就直接写<code>def getNext(next, s):</code>，直接引用<code>getNext(next, needle)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNext</span>(<span class="params"><span class="built_in">next</span>, s</span>):</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="built_in">next</span>[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> s[i] != s[j]:</span><br><span class="line">            j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>[i] = j</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> needle:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span> = [<span class="number">0</span>] * <span class="built_in">len</span>(needle)</span><br><span class="line">        getNext(<span class="built_in">next</span>, needle)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(haystack)):</span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> haystack[i] != needle[j]:</span><br><span class="line">                j = <span class="built_in">next</span>[j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> haystack[i] == needle[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="built_in">len</span>(needle):    <span class="comment"># 最后一次相等之后还有j+=1，所以判断的时候必须是 j == len(needle)</span></span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="前缀表统一减一"><a href="#前缀表统一减一" class="headerlink" title="前缀表统一减一"></a>前缀表统一减一</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span>* next, <span class="keyword">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">0</span>] = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 注意i从1开始</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; s[i] != s[j + <span class="number">1</span>]) &#123; <span class="comment">// 前后缀不相同了</span></span><br><span class="line">                j = next[j]; <span class="comment">// 向前回退</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j + <span class="number">1</span>]) &#123; <span class="comment">// 找到相同的前后缀</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j; <span class="comment">// 将j（前缀的长度）赋给next[i]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">next</span><span class="params">(needle.size())</span></span>;</span><br><span class="line">		<span class="built_in">getNext</span>(&amp;next[<span class="number">0</span>], needle);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">-1</span>; <span class="comment">// // 因为next数组里记录的起始位置为-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 注意i就从0开始</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; haystack[i] != needle[j + <span class="number">1</span>]) &#123; <span class="comment">// 不匹配</span></span><br><span class="line">                j = next[j]; <span class="comment">// j 寻找之前匹配的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j + <span class="number">1</span>]) &#123; <span class="comment">// 匹配，j和i同时向后移动</span></span><br><span class="line">                j++; <span class="comment">// i的增加在for循环里</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == (needle.<span class="built_in">size</span>() - <span class="number">1</span>) ) &#123; <span class="comment">// 文本串s里出现了模式串t</span></span><br><span class="line">                <span class="keyword">return</span> (i - needle.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNext</span>(<span class="params">self, <span class="built_in">next</span>, s</span>):</span></span><br><span class="line">        j = -<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>[<span class="number">0</span>] = j</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> s[i] != s[j + <span class="number">1</span>]:</span><br><span class="line">                j = <span class="built_in">next</span>[j]</span><br><span class="line">            <span class="keyword">if</span> s[i] == s[j + <span class="number">1</span>]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="built_in">next</span>[i] = j</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span>(<span class="params">self, haystack: <span class="built_in">str</span>, needle: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> needle:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span> = [<span class="number">0</span>] * <span class="built_in">len</span>(needle)</span><br><span class="line">        self.getNext(<span class="built_in">next</span>, needle)</span><br><span class="line">        j = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(haystack)):</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> haystack[i] != needle[j + <span class="number">1</span>]:</span><br><span class="line">                j = <span class="built_in">next</span>[j]</span><br><span class="line">            <span class="keyword">if</span> haystack[i] == needle[j + <span class="number">1</span>]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="built_in">len</span>(needle) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> i - j</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这种题就和二叉树那种题一样，应该多练多做，做熟练了就好了。理解很重要，理解了之后就算一时半会写不出来代码，多耗一会自己模拟几遍，代码也能写出来。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的深拷贝与浅拷贝</title>
    <url>/2024/07/18/Python%E4%B8%AD%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<ul>
<li>浅拷贝：复制对象，但不复制包含的子对象。修改复制后的子对象会影响原始对象。</li>
<li>深拷贝：递归地复制对象及其包含的所有子对象。复制后的对象与原始对象完全独立。</li>
</ul>
<p><strong>可变对象 vs 不可变对象</strong></p>
<ul>
<li>不可变对象：如整数、字符串、元组等，不能修改它们的内容。对它们的重新赋值只会改变引用，不会影响原对象。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = a</span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出: 4</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可变对象：如列表、字典、集合等，可以修改它们的内容。多个引用指向同一个可变对象时，对该对象的任何修改都会反映到所有引用中。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出: [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出: [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p>对于不可变对象，重新赋值会创建一个新的对象引用，不会影响原对象。<br>对于可变对象，修改对象内容会影响所有引用，因为它们指向的是同一个对象。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo博客使用方法</title>
    <url>/2022/05/04/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>今天想给博客里加内容的时候，完全忘记了要怎么做，所以赶紧搜了一下怎么增加、上传文章，顺便给自己做了一个教程。</p>
<h3 id="在博客根目录打开命令行"><a href="#在博客根目录打开命令行" class="headerlink" title="在博客根目录打开命令行"></a>在博客根目录打开命令行</h3><p>可以用cmd也可以用git bash（个人感觉这个方便一点）</p>
<h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type"></span>文章标题</span><br></pre></td></tr></table></figure>
<h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><p>在sourse&#x2F;_posts中找到生成的md文件，打开后就可以写文章了</p>
<h3 id="生成文章"><a href="#生成文章" class="headerlink" title="生成文章"></a>生成文章</h3><p>先清理旧的数据</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure>
<p>生成新的页面</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>
<h3 id="预览生成的页面"><a href="#预览生成的页面" class="headerlink" title="预览生成的页面"></a>预览生成的页面</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure>
<p>预览结束后关闭预览输入<code>ctrl+c</code>就可以了</p>
<h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<p>如果不想预览想直接生成并发布的话，也可以直接用</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">hexo g <span class="meta">&amp;&amp; hexo d</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《焦虑是一种能量》</title>
    <url>/2024/07/22/%E3%80%8A%E7%84%A6%E8%99%91%E6%98%AF%E4%B8%80%E7%A7%8D%E8%83%BD%E9%87%8F%E3%80%8B/</url>
    <content><![CDATA[<p>书名：焦虑是一种能量<br>作者：尹依依</p>
<hr>
<p>让焦虑消失，对成年人来说，简直是一个不可能完成的任务。无论你多么佛系，生活总有办法将你打趴在地。既然一定会焦虑，我们不妨多思考一下怎么利用焦虑的力量。</p>
<hr>
<p>当我们焦虑的时候，一味地告诉自己不要担心，有时候反而会更糟糕。心理学里有个词汇，叫二级焦虑，就是担心自己太焦虑而引发的更大的焦虑。</p>
<hr>
<p>朱莉·诺勒姆教授有一套关于<strong>防御性悲观主义倾向的测试题</strong>，大家可以用来思考自己化解焦虑的方式。</p>
<ul>
<li>在开始某项任务时，总是预计最坏结果。</li>
<li>会经常想，事情一定会变得更糟。</li>
<li>会尝试从各个角度去思考可能有的最糟糕结果。</li>
<li>会担心不能达成目标或者完成任务。</li>
<li>会花很多时间担心事情会出错的环节。</li>
<li>会想象如果任务失败了，自己受伤和挫败的情绪。</li>
<li>会思考应对失误的各种可能方法。</li>
<li>会经常提醒自己不要松懈，不要太过自信。</li>
<li>会花很多的时间来计划所有环节。</li>
<li>会经常担心失误，所以准备也会更充分。</li>
</ul>
<p>如果你对以上问题的回答大多数是“Yes”，那你就有可能拥有将焦虑化作动力的能力，好好利用起来吧！<br>人生路上，如果焦虑无法避免，那么不妨就从焦虑中寻找动力。小说家G.B.斯特恩说过：“乐观的人发明飞机探索天空，悲观的人发明降落伞防止坠落。”如果我们懂得怎样看待情绪，那么每种情绪都有力量。</p>
<hr>
<p>我们的文化推崇喜怒不形于色、泰山崩于前而色不变，所以我们习惯偷着乐、躲着哭。斯坦福大学心理学副教授珍妮·蔡是一名专门研究东亚文化的心理学专家，她曾经对比中国和美国的少儿图书，发现中国儿童读物的人物表情明显更内敛，少有大笑或者大哭等张力十足的表情。在研究中她还指出：情绪相对来说是一个更加西方化的概念，而将情绪细分，并不是每一种文化与生俱来的意识。这个观点我完全同意。相比把情绪挂在嘴边的西方人来说，我们要弄清楚自己的内心感受是个大难题。英国的幼儿园常会挂着情绪图谱，上面有愤怒、悲哀、愉快、害怕等情绪，孩子们从小就被教育去感受情绪。相比之下，中国的成年人很少能准确地感知自己的情绪。</p>
<hr>
<p>为什么处处要求完美会带来焦虑？要回答这个问题，我们需要剖析“完美”这个词，看清楚完美主义的真相。在心理学上，<strong>完美主义有六大倾向：对自己要求高；觉得别人对自己的期待高；觉得如果不做得完美，就会被批评或者导致灾难、不利的后果；不停怀疑自我；严格遵循次序；不能接受错误</strong>。完美主义的这些倾向在不同个体身上会表现出不同的症状。		</p>
<blockquote>
<p>六大倾向前四个都占了，后两个没明白什么意思不确定</p>
</blockquote>
<p>我究竟为什么需要完美？如果是为了得到“观众”的喝彩和“裁判”的评判，那么，那些观众和裁判对我来说真的重要吗？如果是为了将一件事情做好，那么，是不是只要自己尽力了就可以了？</p>
<blockquote>
<p>别太在意别人的看法，即使别人是什么权威，也不要畏惧，不要害怕ta对你的看法、ta对你的评判。</p>
</blockquote>
<hr>
<p>美国社会心理学家亚伯拉罕·马斯洛，提出了人类需求五层次理论。他曾经在研究里描述过缺乏安全感的表现：<br>把世界看成是充满野兽的丛林，危险无处不在；内心深信其他人都自私而且目的不纯，所以宁愿孤身一人也不与人同行；不愿意信任别人，富有攻击性；经常陷入强烈的焦虑和紧张状态，看待事物悲观，很难获得愉悦感；总被内疚折磨，时常拷问内心；大多有点神经质、行事自私以及以自我为中心。</p>
<hr>
<p>治愈心理创伤是非常艰难的。但是，如果不去关注曾经的伤痛，后果可能会更严重。过往激起的小水花经过时间的酝酿，也许会变为惊天巨浪，将现在的我们吞噬。<br>第一次诊疗中，她痛哭着对我说，她觉得自己的人生没有希望了。我递了一张纸巾给她，然后轻轻告诉她：<strong>“可是，你活了下来。你做得很好。”</strong></p>
<ol>
<li>在情绪稳定的状态下处理创伤。人在情绪的冲击下很难理性地思考问题，所以首先要确保自己的情绪是足够稳定的，然后再开始疗伤。我常在接待来访者之前通过深呼吸来平静自己的情绪。</li>
<li>打捞回忆。从过往的千般思绪里，筛出那些最痛苦的记忆。如果有很多伤害，不要急着一起记起，安抚内心是需要耐心和时间的。</li>
<li>识别当初受到伤害时的情绪。当时的感受是羞愧、害怕、耻辱，还是愤怒？弄清楚了之后才能对症下药。</li>
<li>承认那些感受的正当性，原谅自己当初的不作为。过去的事情也许现在看来不算什么，但对当时的自己来说是很严重的，所以成了心结。<strong>有一点是确定的，当时的自己已经尽力了。</strong></li>
</ol>
<blockquote>
<p>我已经做出了当时能做的最好的选择，我已经尽力了，那些糟糕事情的发生不是我的过错。</p>
</blockquote>
<p>治疗创伤后遗症最艰难的步骤是重现创伤史，也就是要营造一个安全的环境，让患者反复面对曾经被伤害的自己，一步步在心理上脱敏。这个环节很痛苦，用痛如剔骨来形容也不过分。正如我的女患者，多次崩溃发怒，提起那些伤害，就好像一次次撕开还未愈合的伤口。</p>
<hr>
<p>你也许会想，<strong>这么痛苦的新生，宁愿不要好吗！确实是啊，但是你不要，生活也不会放过你啊</strong>。未来会发生的可能不至于是丧子失亲，但是被分手、被开除、被退租、被拒绝、被打压、被霸凌、被忽视等，都很常见。<strong>与其期待无风无浪的人生，还不如主动强身健体。将不可避免的苦难变成滋养，是没有办法中最好的办法</strong>。在短暂又漫长的这一生里，困难处处可见，创伤也不会轻易放过我们。心理上是否有弹性，决定了我们是不是能够在困境中依然保持希望，保持乐观，保持冷静思考。这种抗挫能力可以在创伤之后被激发，也可以从现在就开始培养。</p>
<p>最后强调一点，创伤激发性成长理论的奠基者、美国北卡罗来纳大学心理学教授Tedeschi曾经说过，<strong>女性更容易从创伤中获得成长</strong>，这也是我在心理咨询中反复验证过的。柔软的力量在这里也可以看到呢。用我们自己的爱和温暖来支撑自己的开放性和主动性，就一定能成长。“任何不能杀死你的，都会使你更强大。”</p>
<blockquote>
<p>女人，当之无愧的第一性。</p>
</blockquote>
<hr>
<p><strong>能接受自己的错误，才可以继续勇敢前行</strong>。反之，则会在心理上停步不前。是让犯错的痛苦将我们吞没，还是拍拍身上的灰，爬起来继续往前走？这是一个艰难的抉择，抉择的权利掌握在你手里。</p>
<hr>
<p>那些明白自己负面情绪来源的人，相比对负面情绪一无所知的人，情绪控制力高30%。了解自己情绪的人，相对来说也有着更健康的心理防御水平，不会酒精、毒品上瘾，很少对别人乱发脾气，能够对自己的情绪负责，也更能够与身边的人共情。</p>
<p>情绪是我们行动的发动机。每一种情绪，背后都带着推动我们前行的力量。身未动，心已远，就是代表着情绪能够比身体更早地对周围的环境产生反应。比如害怕，会让我们在险恶的环境下随时应战或者逃跑；悲哀，会提醒我们需要疗伤和宣泄；愤怒，则会让我们更有力量来保护自己。如果我们没有这些“负面”情绪的保护，我们会失去边界，我们会任人欺负，我们会罔顾危险，我们会让心里的伤口加重，导致出现更严重的心理障碍。</p>
<p>我们之所以害怕负面情绪，一个很大的原因是我们觉得自己不能控制这些负面情绪。<strong>负面情绪不是洪水猛兽，用围堵打压的方式去消灭是不会奏效的。只有耐心地聆听它们，它们才能平息</strong>。</p>
<hr>
<p>自怜会让我们不停地和别人比较。<strong>比较，是很多糟糕情绪的直接起因</strong>。我的来访者看到了别人的快乐，却忘了那只是生活的一面而已。孩子带来的不仅仅是欢笑，还有尿片、无休止的哭闹、自由的丧失和沉重的责任。而拥有伴侣更不等于快乐，一段感情的维持需要双方极大的妥协，中间还可能夹杂着无数冲突。所以，<strong>与其羡慕、嫉妒别人的生活，不如过好自己的生活</strong>。</p>
<blockquote>
<p>与其羡慕别人一毕业就找到大厂生活月入一两万，不如过好自己的生活…她月入一两万可她也加班到很晚…<br>可这是否有种精神胜利法的感觉呢？</p>
<blockquote>
<p>确实，“与其羡慕别人，不如过好自己的生活”这种观点有时会被误认为是一种精神胜利法，即通过贬低别人的成就或者生活质量来安慰自己。然而，这种想法的核心并不是要贬低别人，而是要<strong>把关注点放在自己身上，找到自己的价值和满足感</strong>。<br>精神胜利法通常是指一种自我安慰的方式，通过心理上的自我欺骗来让自己感觉更好，而没有实际的行动或改进。但这里提到的观点其实是在倡导一种健康的心理状态和生活态度，即专注于自己能控制和改善的方面，而不是浪费精力在比较和嫉妒上。<br>这种态度的好处在于：</p>
<ol>
<li>减少负面情绪：<strong>不断地与别人比较很容易产生嫉妒、不满和焦虑情绪，而专注于自己的生活和进步可以减少这些负面情绪</strong>。</li>
<li>提升自我价值感：每个人的生活都有独特的挑战和成就，<strong>学会欣赏自己的努力和成果可以提升自我价值感</strong>。</li>
<li>培养积极的生活态度：通过专注于自己的成长和幸福，可以培养更积极和主动的生活态度，而不是被动地羡慕和嫉妒别人。</li>
<li>实际行动的推动力：把注意力集中在自己的生活上，可以更清楚地认识到自己的目标和需要，从而采取实际行动去改善和提升自己的生活。</li>
</ol>
<p>当然，这并不意味着不能从别人的成功中得到启发和动力。关键在于心态的调整：<strong>不是通过贬低别人的成就来安慰自己，而是通过欣赏自己的独特之处和努力，找到属于自己的幸福和满足感</strong>。<br>总结来说，与其说是精神胜利法，不如说是一种<strong>积极的生活哲学</strong>，它强调的是<strong>自我认同和实际行动</strong>，而不是通过心理上的自我欺骗来获得短暂的安慰。</p>
</blockquote>
</blockquote>
<hr>
<p>自爱，从心理学的角度来说，就是尊重、接受和原谅自己。<br>你的努力、你的优秀、你的坚持需要被尊重；你的尝试、你的妥协、你的难堪需要被接受；你的痛苦、你的放弃、你的失败需要被原谅。<br>在生活中，<strong>你就是自己最好的朋友，你需要聆听自己、善待自己、照顾自己</strong>，而不是等着别人来聆听、善待和照顾你。</p>
<p>自爱是一个非常大的话题，也是我们人生中必修的功课。下面这些小贴士，可以让你开始自爱的旅程:</p>
<ol>
<li>我们要<strong>停止和外界比较</strong>。马上，立即！我们从别人身上，永远不会找到自己的光芒。</li>
<li><strong>放大你努力的过程</strong>，而不是努力的结果。还记得那次朗诵比赛你没有得奖，但是你努力克服了害羞走上台前的感受吗？对的，不要太在意结果，但是努力享受跨越障碍的过程，这才是最终跑起来的动力。</li>
<li>学着<strong>面对真实的自己</strong>，从外在到内心。可以是素颜一天，也可以是写下自己内心脆弱的想法，然后说我可以，一时半会儿做不到，也没有关系。真实的你，就是最美丽的。</li>
</ol>
<hr>
<p>如何不被内疚感折磨？<br>如果是被他人情感绑架时产生了内疚情绪，我们要怎么办呢？</p>
<p>情感隔离和设立边界是最行之有效的方法。没有底线地去满足他人的期望，只会造成对方更多地索取，还会失去自己成长的力气和空间。意识到自己的情感和行为被控制时，请务必立即止损，哪怕他们是“为你好”，<strong>哪怕他们是你目前还不敢与之对抗的人，你也要在心中划清与他们的界限，然后在适当的时候选择离开和切割</strong>。总会有机会的，只要你想。<br>忠于自己，永远是最难的，在任何时候都难。但是不是因为难，我们就不去做呢？这也许更值得思考，毕竟人生是自己的，不是吗？</p>
<blockquote>
<p>总有机会的。</p>
</blockquote>
<hr>
<blockquote>
<p>后面的章节内容都是关于婚姻、孩子的话题，作为一个不打算结婚也不打算生娃的人，这些话题和我并没有什么关系，就不看了。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>指针问题</title>
    <url>/2024/07/18/%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>做题的时候突然产生的疑问：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dumpy = ListNode(<span class="built_in">next</span>=head)</span><br><span class="line">left, right = dumpy, dumpy</span><br></pre></td></tr></table></figure>

<p>为什么left 和 right 的改变会影响dumpy?</p>
<p><strong>变量和引用</strong></p>
<p>在Python中，所有变量都是对象的引用。当你执行赋值操作时，实际上是将变量名绑定到对象的引用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dumpy = ListNode(<span class="built_in">next</span>=head)</span><br><span class="line">left, right = dumpy, dumpy</span><br></pre></td></tr></table></figure>

<p><code>dumpy = ListNode(next=head)</code>：这里创建了一个新的 ListNode 对象，并将 dumpy 变量指向这个对象。<br><code>left, right = dumpy, dumpy</code>：这里将 left 和 right 都指向 dumpy 所指向的对象，即刚刚创建的 ListNode 对象。</p>
<p><strong>变量赋值示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出: [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p>当 b &#x3D; a 时，b 和 a 都指向同一个列表对象。<br>对 b 进行操作（如 b.append(4)）也会影响 a，因为它们指向的是同一个对象。</p>
<p>同理，在链表操作中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dumpy = ListNode(<span class="built_in">next</span>=head)</span><br><span class="line">left, right = dumpy, dumpy</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dumpy</code> 是一个新的 <code>ListNode</code> 对象。</li>
<li><code>left</code> 和 <code>right</code> 都指向这个 <code>dumpy</code> 对象。</li>
<li>任何对 <code>left</code> 或 <code>right</code> 的操作（如移动指针）都会反映在它们所指向的链表节点上。</li>
</ul>
<p><code>left</code> 和 <code>right</code> 都是指向 <code>dumpy</code> 链表中的节点的指针，当我们移动它们时，它们所指向的节点在链表中的位置发生了改变。因此，当我们修改 <code>left.next</code> 的时候，这实际上是在修改 <code>dumpy</code> 链表的结构。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>指针</tag>
      </tags>
  </entry>
</search>
